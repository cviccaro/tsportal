!function(){"use strict";angular.module("tsportal.auth",[])}(),function(){angular.module("tsportal.busyIndicator",[])}(),function(){"use strict";angular.module("tsportal.clickable",[])}(),function(){"use strict";angular.module("tsportal.lead",["ngResource"])}(),function(){"use strict";angular.module("tsportal.messages",[])}(),function(){angular.module("tsportal.pager",[])}(),function(){angular.module("tsportal.slideMenu",[])}(),function(){angular.module("tsportal.timeago",[])}(),function(){angular.module("tsportal.tradeshow",["ngResource"])}(),function(){"use strict";angular.module("tsportal.leads",[])}(),function(){"use strict";angular.module("tsportal.login",[])}(),function(){"use strict";angular.module("tsportal.tradeshows",[])}(),function(){"use strict";function e(e,t,a){function r(a,r,n){function o(){t.$on("$stateChangeStart",function(){e.resetMessage(),e.show()}),t.$on("$stateChangeSuccess",function(){e.hide()})}function s(){return e.isBusy()}t.isBusy=s,o()}var n={restrict:"E",templateUrl:"../views/busyIndicatorView.html",replace:!0,link:r};return n}angular.module("tsportal.busyIndicator").directive("busyIndicator",e),e.$inject=["busyService","$rootScope","$timeout"]}(),function(){"use strict";function e(){function e(e,t,a){t.addClass("clickable"),t.on("click",function(e){null===navigator.userAgent.match(/PhantomJS/g)&&(t.siblings().removeClass("active"),t.addClass("active"))})}var t={restict:"A",link:e};return t}angular.module("tsportal.clickable").directive("clickable",e)}(),function(){"use strict";function e(e,t,a){function r(r,n,o){var s=r.hasOwnProperty("ctrl")?r.ctrl:r;r.$watch(function(){return e.getMessages()},function(e,t){"undefined"!=typeof e&&(s.messages=e)}),t.$on("$stateChangeSuccess",function(){e.purge()}),s.addMessage=function(t){t=e.addMessage(t),a(function(){$(".messages .alert[message-id="+t.id+"]").addClass("in")})},s.removeMessage=function(t){$(".messages .alert[message-id="+t+"]").on("transitionend",function(){r.$apply()}).css("opacity",0),a(function(){e.removeMessage(t)})},s.addSuccessMessage=function(e){var t={icon:"ok",type:"success",iconClass:"icon-medium",dismissible:!0,message:"Your changes have been saved"};return e=$.extend(t,e),s.addMessage(e)},s.addErrorMessage=function(e){var t={type:"danger",dismissible:!0,icon:"exclamation-sign",iconClass:"icon-medium",message:"Sorry, something went wrong."};return e=$.extend(t,e),s.addMessage(e)},s.purgeMessages=function(){e.purge()}}var n={restrict:"E",templateUrl:"../views/messagesView.html",replace:!0,link:r};return n}angular.module("tsportal.messages").directive("messages",e),e.$inject=["messageService","$rootScope","$timeout"]}(),function(){"use strict";function e(){function e(e,t,a){e.getRange=function(e){return new Array(e)}}var t={restrict:"E",scope:{currentPage:"=",totalPages:"=",getResults:"&getResults",tradeshow:"="},templateUrl:"../views/pagerView.html",link:e};return t}angular.module("tsportal.pager").directive("pager",e)}(),function(){"use strict";function e(e,t,a,r,n){function o(o,s,i){function c(){g={hide:function(){s.removeClass("visible")},show:function(){s.addClass("visible")},setAlignment:function(e){o.alignment=e,s.attr("alignment",e)}},o.alignment=o.alignment||(window.outerWidth<=768?"bottom":"right"),t.$on("$stateChangeStart",function(){g.hide()}),n.bind("keyup",function(e){27===e.which&&g.hide()})}function l(){g.hide()}function u(t,n){if(a.menus&&a.menus.hasOwnProperty(t)){for(var i in n)o[i]=n[i];var c=a.menus[t],l=r('<h5 class="slide-menu-title">'+c.title+"</h5>")(o);s.find("h5").replaceWith(l);var u=a.buildMenu(c),d=r(u)(o);e(function(){s.find(".slide-menu-content").html(d),g.show()})}}function d(e){g.setAlignment(e)}var g;o.openMenu=u,o.closeMenu=l,o.setAlignment=d,c()}var s={restrict:"E",replace:!0,transclude:!0,templateUrl:"../views/slideMenuView.html",link:o};return s}angular.module("tsportal.slideMenu").directive("slideMenu",e),e.$inject=["$timeout","$rootScope","slideMenuService","$compile","$document"]}(),function(){"use strict";function e(){function e(e,t,a){e.getTimeAgo=function(e){return moment(e,moment.ISO_8601).fromNow()}}var t={restrict:"E",scope:{time:"="},template:'<span class="time-ago">{{getTimeAgo(time)}}</span>',link:e};return t}angular.module("tsportal.timeago").directive("timeago",e)}(),function(){"use strict";function e(e){function t(e,t){s.push({config:e,deferred:t})}function a(e){if(e)for(var t=0;t<s.length;++t)s[t].deferred.reject(e);s=[]}function r(e){for(var t=0;t<s.length;++t)n(e(s[t].config),s[t].deferred);s=[]}function n(t,a){function r(e){a.resolve(e)}function n(e){a.reject(e)}o=o||e.get("$http"),o(t).then(r,n)}var o,s=[],i={append:t,rejectAll:a,retryAll:r,retryHttpRequest:n};return i}function t(e,t,a,r){var n,o,s,i=/\/{0,1}api\/[a-zA-Z\/0-9\?\=\&\%\+\-\_]*/g;return{request:function(t){return n=n||e.get("authService"),t.url.match(i)&&"/api/authenticate"!=t.url&&!t.headers.hasOwnProperty("Authorization")&&(n.hasToken()?t.headers.Authorization="Bearer "+n.token.get():(s=s||e.get("$state"),s.go("auth"))),t},response:function(t){var a=t.config;return"/api/authenticate"==a.url&&"POST"==a.method&&200==t.status&&(n=n||e.get("authService"),t.data.hasOwnProperty("token")&&(n.token.set(t.data.token),n.loginConfirmed())),t},responseError:function(i){var c=a.defer();switch(n=n||e.get("authService"),s=s||e.get("$state"),i.status){case 400:n.loginCancelled();break;case 401:if(i.data.hasOwnProperty("error")&&"token_expired"==i.data.error)return r.append(i.config,c),t.$broadcast("event:auth-login-required",i),n.hasToken()&&n.refresh(),c.promise;break;case 403:t.$broadcast("event:auth-forbidden",i),n.loginCancelled();break;case 500:o=o||e.get("ngDialog"),o.open({plain:!0,className:"dialog-save ngdialog-theme-default",template:'<span class="glyphicon glyphicon-exclamation-sign red icon-large"></span><span>Sorry, something went wrong.  Try again later.</span>'})}return c.reject(i),c.promise}}}angular.module("tsportal.auth").factory("httpBuffer",e).config(["$httpProvider",function(e){e.interceptors.push(t)}]),e.$inject=["$injector"],t.$inject=["$injector","$rootScope","$q","httpBuffer"]}(),function(){"use strict";function e(e,t){var a=/\/{0,1}api\/[a-zA-Z\/0-9\?\=\&\%\+\-\_]*/g;return{request:function(t){return t.url.match(a)&&e.show(),t},response:function(t){return t.config.url.match(a)&&e.hide(),t},responseError:function(r){return r.config.url.match(a)&&e.hide(),t.reject(r)}}}angular.module("tsportal.busyIndicator").config(["$httpProvider",function(t){t.interceptors.push(e)}]),e.$inject=["busyService","$q"]}(),function(){"use strict";function e(e,t,a,r,n,o,s){function i(){r.get("authCache")||new r("authCache",{maxAge:354e4,deleteOnExpire:"aggressive",storageMode:"localStorage",onExpire:function(e,t){var a=s.get("authService");a.refresh(t).then(function(t){y.put(e,t.data.token)})}}),y=r.get("authCache"),t.isLoggedIn=void 0!==y.get("token")}function c(){var e=a.defer();return this.hasToken()?(t.isLoggedIn=!0,e.resolve()):(this.loginCancelled(),e.reject()),e.promise}function l(){var e=this.token.get();return void 0!==e&&null!==e}function u(e){var t=/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return t.test(e)}function d(e){var t=a.defer();return n.post("/api/authenticate",e,{cache:!1}).then(function(e){t.resolve(e)})["catch"](function(e){t.reject(e)}),t.promise}function g(e,a){o.rejectAll(a),t.$broadcast("event:auth-login-cancelled",e),this.logout()}function h(e,a){var r=a||function(e){return e};t.$broadcast("event:auth-logged-in",e),t.isLoggedIn=!0,o.retryAll(r)}function p(){this.token.remove(),e.go("auth")}function f(e){var t=a.defer(),r=this,o={cache:!1,headers:{}};return"undefined"!=typeof e&&(o.headers.Authorization="Bearer "+e),n.get("api/authenticate/refresh",o).then(function(e){r.token.set(e.data.token),r.loginConfirmed(),t.resolve(e)})["catch"](function(e){r.loginCancelled(),t.reject(e)}),t.promise}function m(){return y.get("token")}function v(){y.remove("token")}function w(e){y.put("token",e)}var y,$={checkApiAccess:c,hasToken:l,isValidEmail:u,login:d,loginCancelled:g,loginConfirmed:h,logout:p,refresh:f,token:{get:m,set:w,remove:v}};return i(),$}angular.module("tsportal.auth").factory("authService",e),e.$inject=["$state","$rootScope","$q","CacheFactory","$http","httpBuffer","$injector"]}(),function(){"use strict";function e(e,t){function a(){e.workingMessage=p.defaultMessage}function r(e){h=e?!1:!0}function n(e){return d}function o(){g=!1}function s(){return g&&!h}function i(){return $(".loading-indicator").is(":visible")}function c(){this.setMessage(this.defaultMessage)}function l(t){d=e.workingMessage=t}function u(){g=!0}var d,g=!1,h=!1,p={defaultMessage:"Working on it",forceHide:r,getMessage:n,hide:o,isBusy:s,isVisible:i,resetMessage:c,setMessage:l,show:u};return a(),p}angular.module("tsportal.busyIndicator").factory("busyService",e),e.$inject=["$rootScope","$timeout"]}(),function(){"use strict";function e(e,t,a,r,n){function o(t,a,r,n,o,s){return void 0===a&&(a="1"),void 0===n&&(n="updated_at"),void 0===o&&(o=1),void 0===r&&(r=15),void 0===s&&(s=""),e.get("api/tradeshows/"+t+"/leads?page="+a+"&perPage="+r+"&orderBy="+n+"&orderByReverse="+parseInt(o)+"&filter="+s,{cache:!0})}function s(e){var r=e.first_name+" "+e.last_name,o='<span class="glyphicon glyphicon-trash red icon-large"></span><span>Are you sure you want to delete Lead <em>'+r+'</em>?<br /><strong>This cannot be undone.</strong></span><div class="dialog-buttons"><button class="btn btn-danger" ng-click="confirm()">Yes, delete</button> <button class="btn btn-cancel" ng-click="closeThisDialog()">Cancel</button></div>';t.openConfirm({plain:!0,className:"dialog-destroy ngdialog-theme-default",template:o,showClose:!1}).then(function(){n.setMessage("Deleting"),a["delete"]({id:e.id}).$promise.then(function(e){e.hasOwnProperty("success")&&e.success===!0?t.open({plain:!0,className:"dialog-success ngdialog-theme-default",template:'<span class="glyphicon glyphicon-check green icon-large"></span><span>Lead <em>'+r+"</em> has been successfully deleted.</span>"}).closePromise.then(function(){window.location.reload()}):t.open({plain:!0,className:"dialog-error ngdialog-theme-default",template:'<span class="glyphicon glyphicon-exclamation-sign red icon-large"></span><span>An error occured when trying to delete Lead <em>'+r+"</em>.</span>  Please try again or contact support."})},function(e){t.open({plain:!0,className:"dialog-error ngdialog-theme-default",template:'<span class="glyphicon glyphicon-exclamation-sign red icon-large"></span><span>An error occured when trying to delete Lead <em>'+r+"</em>.</span>  Please try again or contact support."})})})}var i={deleteLead:s,retrieve:o};return i}angular.module("tsportal.lead").factory("leadService",e),e.$inject=["$http","ngDialog","Lead","$rootScope","busyService"]}(),function(){"use strict";function e(e,t){function a(e){return e.id=s.length+1,s.push(e),e}function r(){return s}function n(e){s[e-1]&&s.splice(e-1,1)}function o(){s=[]}var s=[],i={addMessage:a,getMessages:r,purge:o,removeMessage:n};return i}angular.module("tsportal.messages").factory("messageService",e),e.$inject=["$timeout","$q"]}(),function(){"use strict";function e(){function e(e,t){this.menus[e]=t}function t(e){function t(){}function a(e){var t="";for(var a in e.items){var r=e.items[a],n=r.title||a,o='<a title="'+n+'"',s=r.url,i=r.click,c=r.show;o+=s?' href="/#/'+s+'"':' href="javascript:void(0)"',i&&(o+=' ng-click="'+i+'"'),c&&(o+=' ng-show="'+c+'"'),o+=">"+n+"</a>",t+="<li>"+o+"</li>"}return"<ul>"+t+"</ul>"}var r={menus:this.menus,buildMenu:a};return t(),r}return this.menus={},this.registerMenu=e,this.$get=t,t.$inject=["$rootScope"],this}angular.module("tsportal.slideMenu").provider("slideMenuService",e)}(),function(){"use strict";function e(e,t,a,r,n){function o(e){var a=e.name,o=e.id;i=r.openConfirm({plain:!0,className:"dialog-destroy ngdialog-theme-default",template:'<span class="glyphicon glyphicon-trash red icon-large"></span><span>Are you sure you want to delete Tradeshow <em>'+a+'</em>?<br /><strong>This cannot be undone.</strong></span><div class="dialog-buttons"><button class="btn btn-danger" ng-click="confirm()">Yes, delete</button> <button class="btn btn-cancel" ng-click="closeThisDialog()">Cancel</button></div>',showClose:!1}).then(function(){n.setMessage("Deleting"),t["delete"]({tradeshowId:o}).$promise.then(function(e){e.hasOwnProperty("success")&&e.success===!0?r.open({plain:!0,className:"dialog-success ngdialog-theme-default",template:'<span class="glyphicon glyphicon-check green icon-large"></span><span>Tradeshow <em>'+a+"</em> has been successfully deleted.</span>"}).closePromise.then(function(){window.location.reload()}):r.open({plain:!0,className:"dialog-error ngdialog-theme-default",template:'<span class="glyphicon glyphicon-exclamation-sign red icon-large"></span><span>An error occured when trying to delete Tradeshow <em>'+a+"</em>.</span>  Please try again or contact support."})},function(e){r.open({plain:!0,className:"dialog-error ngdialog-theme-default",template:'<span class="glyphicon glyphicon-exclamation-sign red icon-large"></span><span>An error occured when trying to delete Tradeshow <em>'+a+"</em>.</span>  Please try again or contact support."})})})}function s(t,a,r,n,o){return void 0===t&&(t="1"),void 0===r&&(r="updated_at"),void 0===n&&(n=1),void 0===a&&(a=15),void 0===o&&(o=""),e.get("api/tradeshows?page="+t+"&perPage="+a+"&orderBy="+r+"&orderByReverse="+parseInt(n)+"&filter="+o,{cache:!0})}var i,c={retrieve:s,deleteTradeshow:o};return c}angular.module("tsportal.tradeshow").factory("tradeshowService",e),e.$inject=["$http","Tradeshow","$rootScope","ngDialog","busyService"]}(),function(){"use strict";function e(e,t){return e("api/leads/:id",{id:"@id"},{index:{method:"GET",url:"api/tradeshows/:tradeshowId/leads",params:{tradeshowId:"@tradeshowId"}},get:{cache:t.get("defaultCache")}})}angular.module("tsportal.lead").factory("Lead",e),e.$inject=["$resource","CacheFactory"]}(),function(){"use strict";function e(e,t){return e("api/tradeshows/:id",{id:"@id"},{get:{cache:t.get("defaultCache")},create:{method:"POST",url:"api/tradeshows/create"},"delete":{method:"DELETE"}})}angular.module("tsportal.tradeshow").factory("Tradeshow",e),e.$inject=["$resource","CacheFactory"]}(),function(){"use strict";function e(e,t,a,r,n,o){function s(){o.get("loginForm")||new o("loginForm",{maxAge:24192e5,deleteOnExpire:"aggressive",storageMode:"localStorage"}),c.cache=o.get("loginForm"),c.cache.get("rememberMe")&&c.cache.get("email")&&(c.rememberMe=c.cache.get("rememberMe"),c.email=c.cache.get("email")),r.hasToken()&&a.go("tradeshows")}function i(){var e={email:c.email,password:c.password};c.purgeMessages(),r.login(e).then(function(e){c.rememberMe&&(c.cache.put("email",c.email),c.cache.put("rememberMe",c.rememberMe)),a.go("tradeshows")})["catch"](function(e){c.addErrorMessage({message:"The email or password entered was incorrect."})})}var c=this;c.cache=null,c.rememberMe=!1,c.login=i,s()}angular.module("tsportal.login").controller("LoginController",e),e.$inject=["$rootScope","$scope","$state","authService","$timeout","CacheFactory"]}(),function(){"use strict";function e(e){e.logout()}angular.module("tsportal.login").controller("LogoutController",e),e.$inject=["authService"]}(),function(){"use strict";function e(e,t,a,r,n,o,s,i,c,l,u,d){function g(){}function h(){n.go("tradeshowEdit",{id:f.lead.tradeshow_id})}function p(){f.leadForm.$valid&&(l.setMessage("Saving"),i.save(f.lead).$promise.then(function(t){f.lead=t,f.addSuccessMessage(),e.defaults.cache.removeAll()})["catch"](function(e){f.addErrorMessage()}))}var f=this;f.goBack=h,f.save=p,f.lead=d,f.title="Editing Lead",g()}angular.module("tsportal.leads").controller("LeadEditController",e),e.$inject=["$http","$q","$scope","$timeout","$state","$stateParams","ngDialog","Lead","Tradeshow","busyService","messageService","leadData"]}(),function(){"use strict";function e(e,t,a,r,n,o,s,i){function c(){o.checkApiAccess()}function l(){a.go("tradeshows")}function u(){d.tradeshowForm.$valid&&(s.setMessage("Saving new"),n.create(d.tradeshow).$promise.then(function(e){var t=e.id;r.open({plain:!0,className:"dialog-save ngdialog-theme-default",template:'<span class="glyphicon glyphicon-check green icon-large"></span><span>Your new tradeshow has been created successfully.  Close this message box to proceed to the tradeshow\'s edit page.</span>'}).closePromise.then(function(e){a.go("tradeshowEdit",{id:t})})})["catch"](function(e){d.addErrorMessage()}))}var d=this;d.goBack=l,d.save=u,d.isNew=!0,d.titlePrefix="Creating new",d.tradeshow={active:0},c()}angular.module("tsportal.tradeshows").controller("TradeshowCreateController",e),e.$inject=["$scope","$timeout","$state","ngDialog","Tradeshow","authService","busyService","messageService"]}(),function(){"use strict";function e(e,t,a,r,n,o,s,i,c,l,u,d,g,h){function p(){angular.forEach(["currentPage","orderBy","omg","orderByReverse","perPage","query"],function(t){C.formCache.get(t)&&(C[t]=C.formCache.get(t)),e.$watch("ctrl."+t,function(e,a){"undefined"!=typeof e&&C.formCache.put(t,e)})})}function f(e){u.deleteLead(C.pluckLead(e))}function m(e){void 0===e&&(e=C.currentPage),C.lastFetchedPage=e;var a=t.defer();return u.retrieve(C.tradeshow.id,e,C.perPage,C.orderBy,C.orderByReverse,C.query).then(function(e){var t=e.data;C.leads=t.data,C.currentPage=t.current_page,C.totalPages=t.last_page,a.resolve(e)})["catch"](function(e){a.reject(e)}),a.promise}function v(){n.go("tradeshows")}function w(e){for(var t,a=0;t=C.leads[a];a++)if(t.id==e)return t;return!1}function y(){C.getLeads().then(function(e){C.lastFetchedPage>e.data.current_page&&C.getLeads(e.data.last_page)})}function $(){C.tradeshowForm.$valid&&(i.setMessage("Saving"),l.save(C.tradeshow).$promise.then(function(e){C.tradeshow=e,C.addSuccessMessage(),a.defaults.cache.removeAll()})["catch"](function(e){C.addErrorMessage()}))}function b(){1!=C.currentPage&&C.getLeads(1)}var C=this;C.deleteLead=f,C.getLeads=m,C.goBack=v,C.pluckLead=w,C.refreshLeads=y,C.save=$,C.updatePagination=b,C.currentPage=g.data.current_page,C.formCache=h,C.isNew=!1,C.lastFetchedPage=1,C.leads=g.data.data,C.orderBy="updated_at",C.orderByReverse="0",C.perPage="15",C.query="",C.titlePrefix="Editing",C.tradeshow=d,C.totalPages=g.data.last_page,p()}angular.module("tsportal.tradeshows").controller("TradeshowEditController",e),e.$inject=["$scope","$q","$http","CacheFactory","$state","ngDialog","authService","busyService","messageService","Tradeshow","leadService","promisedData","promisedLeadData","promisedFormCache"]}(),function(){"use strict";function e(e,t,a,r,n,o,s,i,c,l,u,d){function g(){angular.forEach(["currentPage","orderBy","orderByReverse","perPage","query"],function(t){var a=b.formCache.get(t);void 0!==a&&null!==a&&(b[t]=a),e.$watch("ctrl."+t,function(e,a){"undefined"!=typeof e&&b.formCache.put(t,e)})})}function h(e){l.deleteLead(b.pluckLead(e))}function p(e){var t=b.pluckTradeshow(e);c.deleteTradeshow(t)}function f(e){window.location.href="/api/tradeshows/"+e+"/report?token="+o.token.get()}function m(e,t){s.forceHide(),void 0===t?t=b.selectedTradeshow:b.selectedTradeshow=t,a(function(){l.retrieve(t.id,e,50,"id",0).then(function(e){s.forceHide(!0);var t=e.data;b.leads=t.data,b.leadCurrentPage=t.current_page,b.leadTotalPages=t.last_page})["catch"](function(e){b.addErrorMessage()})})}function v(e){void 0===e&&(e=b.currentPage),b.lastFetchedPage=e,s.setMessage("Working on it");var a=t.defer();return c.retrieve(e,b.perPage,b.orderBy,b.orderByReverse,b.query).then(function(e){var t=e.data;b.tradeshows=t.data,b.currentPage=t.current_page,b.totalPages=t.last_page,a.resolve(e)})["catch"](function(e){a.reject(e)}),a.promise}function w(e){for(var t,a=0;t=b.leads[a];a++)if(t.id==e)return t;return!1}function y(e){for(var t,a=0;t=b.tradeshows[a];a++)if(t.id==e)return t;return!1}function $(){b.getTradeshows().then(function(e){b.lastFetchedPage>e.data.current_page&&b.getTradeshows(e.data.last_page)})}var b=this;b.deleteTradeshow=p,b.deleteLead=h,b.downloadReport=f,b.getLeads=m,b.getTradeshows=v,b.pluckLead=w,b.pluckTradeshow=y,b.refreshTradeshows=$,b.currentPage=u.data.current_page,b.formCache=d,b.lastFetchedPage=1,b.orderBy="updated_at",b.orderByReverse="1",b.perPage="15",b.query="",b.totalPages=u.data.last_page,b.tradeshows=u.data.data,g()}angular.module("tsportal.tradeshows").controller("TradeshowListController",e),e.$inject=["$scope","$q","$timeout","CacheFactory","ngDialog","authService","busyService","messageService","tradeshowService","leadService","promisedData","promisedFormCache"]}(),function(){"use strict";angular.module("tsportal",["ui.router","angular-jwt","angular-cache","angular-spinkit","ngAnimate","ngDialog","ngResource","frapontillo.bootstrap-switch","angular-chosen","tsportal.auth","tsportal.busyIndicator","tsportal.clickable","tsportal.lead","tsportal.messages","tsportal.pager","tsportal.slideMenu","tsportal.timeago","tsportal.tradeshow","tsportal.leads","tsportal.tradeshows","tsportal.login"]).config(["$stateProvider","$urlRouterProvider","$httpProvider","slideMenuServiceProvider",function(e,t,a,r){r.registerMenu("tradeshow",{title:"Tradeshow<br /><small>{{tradeshow.name}}</small><br /><small>{{tradeshow.lead_count}} leads",items:{edit:{url:"tradeshows/{{tradeshow.id}}/edit",title:"Edit"},"delete":{click:"ctrl.deleteTradeshow(tradeshow.id)",title:"Delete"},report:{click:"ctrl.downloadReport(tradeshow.id)",title:"Excel Report",show:"tradeshow.lead_count > 0"}}}),r.registerMenu("lead",{title:"Lead<br /><small>{{lead.first_name}} {{lead.last_name}}</small><br /><small>{{lead.email_address}}</small>",items:{edit:{url:"leads/{{lead.id}}/edit",title:"Edit"},"delete":{click:"ctrl.deleteLead(lead.id)",title:"Delete"}}}),a.useLegacyPromiseExtensions=!1,t.otherwise("/auth"),e.state("test",{url:"/test",template:"test",controller:"TradeshowListController as ctrl"}).state("auth",{url:"/auth",templateUrl:"../views/loginView.html",controller:"LoginController as ctrl"}).state("logout",{url:"/logout",template:"",controller:"LogoutController as ctrl"}).state("tradeshows",{url:"/tradeshows",templateUrl:"../views/tradeshowListView.html",controller:"TradeshowListController as ctrl",resolve:{promisedData:["tradeshowService","CacheFactory",function(e,t){t.get("formCache")||new t("formCache",{maxAge:36e5,deleteOnExpire:"aggressive",storageMode:"localStorage"});var a=t.get("formCache");return e.retrieve(a.get("currentPage"),a.get("perPage"),a.get("orderBy"),a.get("orderByReverse"),a.get("query"))}],promisedFormCache:["CacheFactory",function(e){return e.get("formCache")}]}}).state("tradeshowEdit",{url:"/tradeshows/:id/edit",templateUrl:"../views/tradeshowView.html",controller:"TradeshowEditController as ctrl",resolve:{promisedData:["Tradeshow","$stateParams",function(e,t){return e.get({id:t.id}).$promise}],promisedLeadData:["leadService","$stateParams","CacheFactory",function(e,t,a){var r="tradeshow"+t.id+"LeadsForm";a.get(r)||new a(r,{maxAge:36e5,deleteOnExpire:"aggressive",storageMode:"localStorage"});var n=a.get(r);return e.retrieve(t.id,n.get("currentPage"),n.get("perPage"),n.get("orderBy"),n.get("orderByReverse"),n.get("query"))}],promisedFormCache:["CacheFactory","$stateParams",function(e,t){var a="tradeshow"+t.id+"LeadsForm";return e.get(a)}]}}).state("tradeshowCreate",{url:"/tradeshows/create",templateUrl:"../views/tradeshowView.html",controller:"TradeshowCreateController as ctrl"}).state("leadEdit",{url:"/leads/:id/edit",templateUrl:"../views/leadView.html",controller:"LeadEditController as ctrl",resolve:{leadData:["Lead","$stateParams",function(e,t){return e.get({id:t.id}).$promise}]}})}]).run(["$http","CacheFactory",function(e,t){t.get("defaultCache")||new t("defaultCache",{maxAge:9e5,cacheFlushInterval:36e5,deleteOnExpire:"aggressive"}),e.defaults.cache=t.get("defaultCache")}]).filter("unsafe",["$sce",function(e){return function(t){return e.trustAsHtml(t)}}])}();
//# sourceMappingURL=data:application/json;base64,
