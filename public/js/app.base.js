!function(){"use strict";function e(e,t){function r(){e.workingMessage=g.defaultMessage}function a(e){return u}function n(){d=!1}function o(){return d}function s(){return $(".loading-indicator").is(":visible")}function i(){this.setMessage(this.defaultMessage)}function c(t){u=e.workingMessage=t}function l(){d=!0}var u,d=!1,g={defaultMessage:"Working on it",getMessage:a,hide:n,isBusy:o,isVisible:s,resetMessage:i,setMessage:c,show:l};return r(),g}angular.module("busyService",[]).factory("busyService",e),e.$inject=["$rootScope","$timeout"]}(),function(){"use strict";function e(e,t){return e("api/leads/:id",{id:"@id"},{index:{method:"GET",url:"api/tradeshows/:tradeshowId/leads",params:{tradeshowId:"@tradeshowId"}},get:{cache:t.get("defaultCache")}})}angular.module("leadServices",[]).factory("Lead",e),e.$inject=["$resource","CacheFactory"]}(),function(){"use strict";function e(e,t,r,a,n){function o(t,r,a,n,o,s){return void 0===r&&(r="1"),void 0===n&&(n="updated_at"),void 0===o&&(o=0),void 0===a&&(a=15),void 0===s&&(s=""),e.get("api/tradeshows/"+t+"/leads?page="+r+"&perPage="+a+"&orderBy="+n+"&orderByReverse="+parseInt(o)+"&filter="+s,{cache:!0})}function s(e){var a=e.first_name+" "+e.last_name,o='<span class="glyphicon glyphicon-trash red icon-large"></span><span>Are you sure you want to delete Lead <em>'+a+'</em>?<br /><strong>This cannot be undone.</strong></span><div class="dialog-buttons"><button class="btn btn-danger" ng-click="confirm()">Yes, delete</button> <button class="btn btn-cancel" ng-click="closeThisDialog()">Cancel</button></div>';t.openConfirm({plain:!0,className:"dialog-destroy ngdialog-theme-default",template:o,showClose:!1}).then(function(){n.setMessage("Deleting"),r["delete"]({id:e.id}).$promise.then(function(e){e.hasOwnProperty("success")&&e.success===!0?t.open({plain:!0,className:"dialog-success ngdialog-theme-default",template:'<span class="glyphicon glyphicon-check green icon-large"></span><span>Lead <em>'+a+"</em> has been successfully deleted.</span>"}).closePromise.then(function(){window.location.reload()}):t.open({plain:!0,className:"dialog-error ngdialog-theme-default",template:'<span class="glyphicon glyphicon-exclamation-sign red icon-large"></span><span>An error occured when trying to delete Lead <em>'+a+"</em>.</span>  Please try again or contact support."})},function(e){t.open({plain:!0,className:"dialog-error ngdialog-theme-default",template:'<span class="glyphicon glyphicon-exclamation-sign red icon-large"></span><span>An error occured when trying to delete Lead <em>'+a+"</em>.</span>  Please try again or contact support."})})})}var i={deleteLead:s,retrieve:o};return i}angular.module("leadServices").factory("leadService",e),e.$inject=["$http","ngDialog","Lead","$rootScope","busyService"]}(),function(){"use strict";function e(e,t,r,a,n,o,s){function i(){var e=r.defer();return this.hasToken()?(t.isLoggedIn=!0,e.resolve()):(this.loginCancelled(),e.reject()),e.promise}function c(){var e=this.token.get();return void 0!==e&&null!==e}function l(e){var t=/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return t.test(e)}function u(e){var t=r.defer();return n.post("/api/authenticate",e,{cache:!1}).then(function(e){t.resolve(e)})["catch"](function(e){t.reject(e)}),t.promise}function d(e,r){o.rejectAll(r),t.$broadcast("event:auth-login-cancelled",e),this.logout()}function g(e,r){var a=r||function(e){return e};t.$broadcast("event:auth-logged-in",e),t.isLoggedIn=!0,o.retryAll(a)}function h(){this.token.remove(),e.go("auth")}function p(e){var t=r.defer(),a=this,o={cache:!1,headers:{}};return"undefined"!=typeof e&&(o.headers.Authorization="Bearer "+e),n.get("api/authenticate/refresh",o).then(function(e){a.token.set(e.data.token),a.loginConfirmed(),t.resolve(e)})["catch"](function(e){a.loginCancelled(),t.reject(e)}),t.promise}function f(){return w.get("token")}function m(){w.remove("token")}function v(e){w.put("token",e)}a.get("authCache")||new a("authCache",{maxAge:354e4,deleteOnExpire:"aggressive",storageMode:"localStorage",onExpire:function(e,t){var r=s.get("loginService");r.refresh(t).then(function(t){w.put(e,t.data.token)})}});var w=a.get("authCache");t.isLoggedIn=void 0!==w.get("token");var y={checkApiAccess:i,hasToken:c,isValidEmail:l,login:u,loginCancelled:d,loginConfirmed:g,logout:h,refresh:p,token:{get:f,set:v,remove:m}};return y}angular.module("loginService",[]).factory("loginService",e),e.$inject=["$state","$rootScope","$q","CacheFactory","$http","httpBuffer","$injector"]}(),function(){"use strict";function e(e,t){function r(e){return e.id=s.length+1,s.push(e),e}function a(){return s}function n(e){s[e-1]&&s.splice(e-1,1)}function o(){s=[]}var s=[],i={addMessage:r,getMessages:a,purge:o,removeMessage:n};return i}angular.module("messageService",[]).factory("messageService",e),e.$inject=["$timeout","$q"]}(),function(){"use strict";function e(e,t){return e("api/tradeshows/:id",{id:"@id"},{get:{cache:t.get("defaultCache")},create:{method:"POST",url:"api/tradeshows/create"},"delete":{method:"DELETE"}})}angular.module("tradeshowServices",["ngResource"]).factory("Tradeshow",e),e.$inject=["$resource","CacheFactory"]}(),function(){"use strict";function e(e,t,r,a,n){function o(e){var r=e.name,o=e.id;i=a.openConfirm({plain:!0,className:"dialog-destroy ngdialog-theme-default",template:'<span class="glyphicon glyphicon-trash red icon-large"></span><span>Are you sure you want to delete Tradeshow <em>'+r+'</em>?<br /><strong>This cannot be undone.</strong></span><div class="dialog-buttons"><button class="btn btn-danger" ng-click="confirm()">Yes, delete</button> <button class="btn btn-cancel" ng-click="closeThisDialog()">Cancel</button></div>',showClose:!1}).then(function(){n.setMessage("Deleting"),t["delete"]({tradeshowId:o}).$promise.then(function(e){e.hasOwnProperty("success")&&e.success===!0?a.open({plain:!0,className:"dialog-success ngdialog-theme-default",template:'<span class="glyphicon glyphicon-check green icon-large"></span><span>Tradeshow <em>'+r+"</em> has been successfully deleted.</span>"}).closePromise.then(function(){window.location.reload()}):a.open({plain:!0,className:"dialog-error ngdialog-theme-default",template:'<span class="glyphicon glyphicon-exclamation-sign red icon-large"></span><span>An error occured when trying to delete Tradeshow <em>'+r+"</em>.</span>  Please try again or contact support."})},function(e){a.open({plain:!0,className:"dialog-error ngdialog-theme-default",template:'<span class="glyphicon glyphicon-exclamation-sign red icon-large"></span><span>An error occured when trying to delete Tradeshow <em>'+r+"</em>.</span>  Please try again or contact support."})})})}function s(t,r,a,n,o){return void 0===t&&(t="1"),void 0===a&&(a="id"),void 0===n&&(n=0),void 0===r&&(r=15),void 0===o&&(o=""),e.get("api/tradeshows?page="+t+"&perPage="+r+"&orderBy="+a+"&orderByReverse="+parseInt(n)+"&filter="+o,{cache:!0})}var i,c={retrieve:s,deleteTradeshow:o};return c}angular.module("tradeshowServices").factory("tradeshowService",e),e.$inject=["$http","Tradeshow","$rootScope","ngDialog","busyService"]}(),function(){"use strict";function e(e,t,r){function a(r,a,n){function o(){t.$on("$stateChangeStart",function(){e.resetMessage(),e.show()}),t.$on("$stateChangeSuccess",function(){e.hide()})}function s(){return e.isBusy()}t.isBusy=s,o()}var n={restrict:"E",templateUrl:"../partials/busy-indicator.html",replace:!0,link:a};return n}angular.module("tsportalDirectives",[]).directive("busyIndicator",e),e.$inject=["busyService","$rootScope","$timeout"]}(),function(){"use strict";function e(){function e(e,t,r){t.addClass("clickable"),t.on("click",function(){null===navigator.userAgent.match(/PhantomJS/g)&&(t.siblings().removeClass("active"),t.addClass("active"))})}var t={link:e};return t}angular.module("tsportalDirectives").directive("clickable",e)}(),function(){"use strict";function e(e,t,r){function a(a,n,o){var s=a.hasOwnProperty("ctrl")?a.ctrl:a;a.$watch(function(){return e.getMessages()},function(e,t){"undefined"!=typeof e&&(s.messages=e)}),t.$on("$stateChangeSuccess",function(){e.purge()}),s.addMessage=function(t){t=e.addMessage(t),r(function(){$(".messages .alert[message-id="+t.id+"]").addClass("in")})},s.removeMessage=function(t){$(".messages .alert[message-id="+t+"]").on("transitionend",function(){a.$apply()}).css("opacity",0),r(function(){e.removeMessage(t)})},s.addSuccessMessage=function(e){var t={icon:"ok",type:"success",iconClass:"icon-medium",dismissible:!0,message:"Your changes have been saved"};return e=$.extend(t,e),s.addMessage(e)},s.addErrorMessage=function(e){var t={type:"danger",dismissible:!0,icon:"exclamation-sign",iconClass:"icon-medium",message:"Sorry, something went wrong."};return e=$.extend(t,e),s.addMessage(e)},s.purgeMessages=function(){e.purge()}}var n={restrict:"E",templateUrl:"../partials/messages.html",replace:!0,link:a};return n}angular.module("tsportalDirectives").directive("messages",e),e.$inject=["messageService","$rootScope","$timeout"]}(),function(){"use strict";function e(){function e(e,t,r){e.getRange=function(e){return new Array(e)}}var t={restrict:"E",scope:{currentPage:"=",totalPages:"=",getResults:"&getResults",tradeshow:"="},templateUrl:"../partials/pager.html",link:e};return t}angular.module("tsportalDirectives").directive("pager",e)}(),function(){"use strict";function e(e,t){function r(e,t,r){e.slideMenu={hideMenu:function(){t.removeClass("visible")},showMenu:function(){t.addClass("visible")},setAlignment:function(r){e.alignment=r,t.attr("alignment",r)}}}var a={restrict:"E",scope:{alignment:"@"},replace:!0,transclude:!0,templateUrl:"../partials/slide-menu-directive.html",link:r};return a}angular.module("tsportalDirectives").directive("slideMenu",e),e.$inject=["$timeout","$rootScope"]}(),function(){"use strict";function e(){function e(e,t,r){e.getTimeAgo=function(e){return moment(e,moment.ISO_8601).fromNow()}}var t={restrict:"E",scope:{time:"="},template:'<span class="time-ago">{{getTimeAgo(time)}}</span>',link:e};return t}angular.module("tsportalDirectives").directive("timeago",e)}(),function(){"use strict";function e(e){function t(e,t){s.push({config:e,deferred:t})}function r(e){if(e)for(var t=0;t<s.length;++t)s[t].deferred.reject(e);s=[]}function a(e){for(var t=0;t<s.length;++t)n(e(s[t].config),s[t].deferred);s=[]}function n(t,r){function a(e){r.resolve(e)}function n(e){r.reject(e)}o=o||e.get("$http"),o(t).then(a,n)}var o,s=[],i={append:t,rejectAll:r,retryAll:a,retryHttpRequest:n};return i}function t(e,t,r,a){var n,o,s,i=/\/{0,1}api\/[a-zA-Z\/0-9\?\=\&\%\+\-\_]*/g;return{request:function(t){return n=n||e.get("loginService"),t.url.match(i)&&"/api/authenticate"!=t.url&&!t.headers.hasOwnProperty("Authorization")&&(n.hasToken()?t.headers.Authorization="Bearer "+n.token.get():(s=s||e.get("$state"),s.go("auth"))),t},response:function(t){var r=t.config;return"/api/authenticate"==r.url&&"POST"==r.method&&200==t.status&&(n=n||e.get("loginService"),t.data.hasOwnProperty("token")&&(n.token.set(t.data.token),n.loginConfirmed())),t},responseError:function(i){var c=r.defer();switch(n=n||e.get("loginService"),s=s||e.get("$state"),i.status){case 400:n.loginCancelled();break;case 401:if(i.data.hasOwnProperty("error")&&"token_expired"==i.data.error)return a.append(i.config,c),t.$broadcast("event:auth-login-required",i),n.hasToken()&&n.refresh(),c.promise;break;case 403:t.$broadcast("event:auth-forbidden",i),n.loginCancelled();break;case 500:o=o||e.get("ngDialog"),o.open({plain:!0,className:"dialog-save ngdialog-theme-default",template:'<span class="glyphicon glyphicon-exclamation-sign red icon-large"></span><span>Sorry, something went wrong.  Try again later.</span>'})}return c.reject(i),c.promise}}}angular.module("authInterceptor",[]).factory("httpBuffer",e).config(["$httpProvider",function(e){e.interceptors.push(t)}]),e.$inject=["$injector"],t.$inject=["$injector","$rootScope","$q","httpBuffer"]}(),function(){"use strict";function e(e,t){var r=/\/{0,1}api\/[a-zA-Z\/0-9\?\=\&\%\+\-\_]*/g;return{request:function(t){return t.url.match(r)&&e.show(),t},response:function(t){return t.config.url.match(r)&&e.hide(),t},responseError:function(a){return a.config.url.match(r)&&e.hide(),t.reject(a)}}}angular.module("busyService").config(["$httpProvider",function(t){t.interceptors.push(e)}]),e.$inject=["busyService","$q"]}(),function(){"use strict";function e(e,t,r,a,n,o){function s(){o.get("loginForm")||new o("loginForm",{maxAge:24192e5,deleteOnExpire:"aggressive",storageMode:"localStorage"}),c.cache=o.get("loginForm"),c.cache.get("rememberMe")&&c.cache.get("email")&&(c.rememberMe=c.cache.get("rememberMe"),c.email=c.cache.get("email")),a.hasToken()&&r.go("tradeshows")}function i(){var e={email:c.email,password:c.password};c.purgeMessages(),a.login(e).then(function(e){c.rememberMe&&(c.cache.put("email",c.email),c.cache.put("rememberMe",c.rememberMe)),r.go("tradeshows")})["catch"](function(e){c.addErrorMessage({message:"The email or password entered was incorrect."})})}var c=this;c.cache=null,c.rememberMe=!1,c.login=i,s()}angular.module("authControllers",[]).controller("AuthController",e),e.$inject=["$rootScope","$scope","$state","loginService","$timeout","CacheFactory"]}(),function(){"use strict";function e(e,t,r,a,n,o,s,i,c,l,u,d,g){function h(){}function p(){a.go("tradeshowEdit",{id:m.lead.tradeshow_id})}function f(){m.leadForm.$valid&&(c.setMessage("Saving"),s.save(m.lead).$promise.then(function(e){m.lead=e,m.addSuccessMessage(),r.defaults.cache.removeAll()})["catch"](function(e){m.addErrorMessage()}))}var m=this;m.goBack=p,m.save=f,m.lead=u,m.title="Editing Lead",h()}angular.module("leadControllers",[]).controller("LeadController",e),e.$inject=["$scope","$q","$http","$state","$stateParams","ngDialog","Lead","Tradeshow","busyService","messageService","leadData","$timeout","$log"]}(),function(){"use strict";function e(e){e.logout()}angular.module("authControllers").controller("LogoutController",e),e.$inject=["loginService"]}(),function(){"use strict";function e(e,t,r,a,n,o,s,i,c){function l(){s.checkApiAccess()}function u(){r.go("tradeshows")}function d(){g.tradeshowForm.$valid&&(i.setMessage("Saving new"),o.create(g.tradeshow).$promise.then(function(e){var t=e.id;n.open({plain:!0,className:"dialog-save ngdialog-theme-default",template:'<span class="glyphicon glyphicon-check green icon-large"></span><span>Your new tradeshow has been created successfully.  Close this message box to proceed to the tradeshow\'s edit page.</span>'}).closePromise.then(function(e){r.go("tradeshowEdit",{id:t})})})["catch"](function(e){g.addErrorMessage()}))}var g=this;g.goBack=u,g.save=d,g.isNew=!0,g.titlePrefix="Creating new",g.tradeshow={active:0},l()}angular.module("tradeshowControllers",[]).controller("TradeshowCreateController",e),e.$inject=["$scope","$timeout","$state","$stateParams","ngDialog","Tradeshow","loginService","busyService","messageService"]}(),function(){"use strict";function e(e,t,r,a,n,o,s,i,c,l,u,d,g,h){function p(){angular.forEach(["currentPage","orderBy","omg","orderByReverse","perPage","query"],function(t){S.formCache.get(t)&&(S[t]=S.formCache.get(t)),e.$watch("ctrl."+t,function(e,r){"undefined"!=typeof e&&S.formCache.put(t,e)})})}function f(e){u.deleteLead(S.pluckLead(e))}function m(e){void 0===e&&(e=S.currentPage),S.lastFetchedPage=e;var r=t.defer();return u.retrieve(S.tradeshow.id,e,S.perPage,S.orderBy,S.orderByReverse,S.query).then(function(e){var t=e.data;S.leads=t.data,S.currentPage=t.current_page,S.totalPages=t.last_page,r.resolve(e)})["catch"](function(e){r.reject(e)}),r.promise}function v(){n.go("tradeshows")}function w(e){for(var t,r=0;t=S.leads[r];r++)if(t.id==e)return t;return!1}function y(){S.getLeads().then(function(e){S.lastFetchedPage>e.data.current_page&&S.getLeads(e.data.last_page)})}function $(){S.tradeshowForm.$valid&&(i.setMessage("Saving"),l.save(S.tradeshow).$promise.then(function(e){S.tradeshow=e,S.addSuccessMessage(),r.defaults.cache.removeAll()})["catch"](function(e){S.addErrorMessage()}))}function C(){1!=S.currentPage&&S.getLeads(1)}var S=this;S.deleteLead=f,S.getLeads=m,S.goBack=v,S.pluckLead=w,S.refreshLeads=y,S.save=$,S.updatePagination=C,S.currentPage=g.data.current_page,S.formCache=h,S.isNew=!1,S.lastFetchedPage=1,S.leads=g.data.data,S.orderBy="updated_at",S.orderByReverse="0",S.perPage="15",S.query="",S.titlePrefix="Editing",S.tradeshow=d,S.totalPages=g.data.last_page,p()}angular.module("tradeshowControllers").controller("TradeshowDetailController",e),e.$inject=["$scope","$q","$http","CacheFactory","$state","ngDialog","loginService","busyService","messageService","Tradeshow","leadService","promisedData","promisedLeadData","promisedFormCache"]}(),function(){"use strict";function e(e,t,r,a,n,o,s,i,c,l,u,d){function g(){angular.forEach(["currentPage","orderBy","orderByReverse","perPage","query"],function(t){var r=y.formCache.get(t);void 0!==r&&null!==r&&(y[t]=r),e.$watch("ctrl."+t,function(e,r){"undefined"!=typeof e&&y.formCache.put(t,e)})})}function h(e){var t=y.pluckTradeshow(e);c.deleteTradeshow(t)}function p(e){window.location.href="/api/tradeshows/"+e+"/report?token="+o.token.get()}function f(e,t){void 0===t?t=y.selectedTradeshow:y.selectedTradeshow=t,l.retrieve(t.id,e,50,"id",0).then(function(e){var t=e.data;y.leads=t.data,y.leadCurrentPage=t.current_page,y.leadTotalPages=t.last_page})["catch"](function(e){y.addErrorMessage()})}function m(e){void 0===e&&(e=y.currentPage),y.lastFetchedPage=e,s.setMessage("Working on it");var r=t.defer();return c.retrieve(e,y.perPage,y.orderBy,y.orderByReverse,y.query).then(function(e){var t=e.data;y.tradeshows=t.data,y.currentPage=t.current_page,y.totalPages=t.last_page,r.resolve(e)})["catch"](function(e){r.reject(e)}),r.promise}function v(e){for(var t,r=0;t=y.tradeshows[r];r++)if(t.id==e)return t;return!1}function w(){y.getTradeshows().then(function(e){y.lastFetchedPage>e.data.current_page&&y.getTradeshows(e.data.last_page)})}var y=this;y.deleteTradeshow=h,y.downloadReport=p,y.getLeads=f,y.getTradeshows=m,y.pluckTradeshow=v,y.refreshTradeshows=w,y.currentPage=u.data.current_page,y.formCache=d,y.lastFetchedPage=1,y.orderBy="updated_at",y.orderByReverse="0",y.perPage="15",y.query="",y.totalPages=u.data.last_page,y.tradeshows=u.data.data,g()}angular.module("tradeshowControllers").controller("TradeshowListController",e),e.$inject=["$scope","$q","$timeout","CacheFactory","ngDialog","loginService","busyService","messageService","tradeshowService","leadService","promisedData","promisedFormCache"]}(),function(){"use strict";angular.module("tsportal",["ui.router","angular-jwt","angular-cache","angular-spinkit","ngAnimate","ngDialog","frapontillo.bootstrap-switch","tsportalDirectives","loginService","busyService","messageService","authInterceptor","authControllers","tradeshowControllers","tradeshowServices","leadControllers","leadServices"]).config(["$stateProvider","$urlRouterProvider","$httpProvider",function(e,t,r){r.useLegacyPromiseExtensions=!1,t.otherwise("/auth"),e.state("auth",{url:"/auth",templateUrl:"../partials/login-form.html",controller:"AuthController as ctrl"}).state("logout",{url:"/logout",template:"",controller:"LogoutController as ctrl"}).state("tradeshows",{url:"/tradeshows",templateUrl:"../partials/tradeshow-list.html",controller:"TradeshowListController as ctrl",resolve:{promisedData:["tradeshowService","CacheFactory",function(e,t){t.get("formCache")||new t("formCache",{maxAge:36e5,deleteOnExpire:"aggressive",storageMode:"localStorage"});var r=t.get("formCache");return e.retrieve(r.get("currentPage"),r.get("perPage"),r.get("orderBy"),r.get("orderByReverse"),r.get("query"))}],promisedFormCache:["CacheFactory",function(e){return e.get("formCache")}]}}).state("tradeshowEdit",{url:"/tradeshows/:id/edit",templateUrl:"../partials/tradeshow-detail.html",controller:"TradeshowDetailController as ctrl",resolve:{promisedData:["Tradeshow","$stateParams",function(e,t){return e.get({id:t.id}).$promise}],promisedLeadData:["leadService","$stateParams","CacheFactory",function(e,t,r){var a="tradeshow"+t.id+"LeadsForm";r.get(a)||new r(a,{maxAge:36e5,deleteOnExpire:"aggressive",storageMode:"localStorage"});var n=r.get(a);return e.retrieve(t.id,n.get("currentPage"),n.get("perPage"),n.get("orderBy"),n.get("orderByReverse"),n.get("query"))}],promisedFormCache:["CacheFactory","$stateParams",function(e,t){var r="tradeshow"+t.id+"LeadsForm";return e.get(r)}]}}).state("tradeshowCreate",{url:"/tradeshows/create",templateUrl:"../partials/tradeshow-detail.html",controller:"TradeshowCreateController as ctrl"}).state("leadEdit",{url:"/leads/:id/edit",templateUrl:"../partials/lead-detail.html",controller:"LeadController as ctrl",resolve:{leadData:["Lead","$stateParams",function(e,t){return e.get({id:t.id}).$promise}]}})}]).run(["$http","CacheFactory",function(e,t){t.get("defaultCache")||new t("defaultCache",{maxAge:9e5,cacheFlushInterval:36e5,deleteOnExpire:"aggressive"}),e.defaults.cache=t.get("defaultCache")}]).filter("unsafe",["$sce",function(e){return function(t){return e.trustAsHtml(t)}}])}();
//# sourceMappingURL=data:application/json;base64,
