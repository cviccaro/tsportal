composerRequireba4045cf52293f64b152fb4c8ef3038d	composerRequireba4045cf52293f64b152fb4c8ef3038d(${1:\$file})
includeFile	includeFile(${1:\$file})
check_digit	check_digit(${1:\$numbers})
plus	plus(${1:\\$a}, ${2:\\$b})
getStub	getStub()
error_log	error_log()
newrelic_notice_error	newrelic_notice_error()
newrelic_set_appname	newrelic_set_appname(${1:\$appname})
newrelic_name_transaction	newrelic_name_transaction(${1:\$transactionName})
newrelic_add_custom_parameter	newrelic_add_custom_parameter(${1:\$key}, ${2:\$value})
tester	tester(${1:\$handler}, ${2:\$record})
showHelp	showHelp(${1:\$error})
parseArgs	parseArgs(${1:\$args})
regex	regex(${1:\$regex})
magicSplit	magicSplit(${1:\$regex}, ${2:\$string})
resolveNodes	resolveNodes(${1:\$code})
resolveMacros	resolveMacros(${1:\$code})
assertArgs	assertArgs(${1:\$num}, ${2:\$args}, ${3:\$name})
resolveArrays	resolveArrays(${1:\$code})
resolveStackAccess	resolveStackAccess(${1:\$code})
removeTrailingWhitespace	removeTrailingWhitespace(${1:\$code})
ensureDirExists	ensureDirExists(${1:\$dir})
regex	regex(${1:\$regex})
magicSplit	magicSplit(${1:\$regex}, ${2:\$string})
test	test(${1:\$a})
functionName	functionName(${1:&\\$a = 0}, ${2:\\$b = 1.0})
showHelp	showHelp(${1:\$error})
krumo	krumo()
k	k()
kd	kd()
JAMAError	JAMAError(${1:\$errorNumber = null})
hypo	hypo(${1:\$a}, ${2:\$b})
hypot	hypot()
transpose	transpose(${1:\$value})
phpseclib_autoload	phpseclib_autoload(${1:\$class})
functionCallbackFirstArgument	functionCallbackFirstArgument(${1:\$args})
globalFunction	globalFunction()
baz	baz()
&foo	&foo(${1:\$bar})
baz	baz()
&foo	&foo(${1:\$bar})
any	any()
anything	anything()
arrayHasKey	arrayHasKey(${1:\$key})
assertArrayHasKey	assertArrayHasKey(${1:\$key}, ${2:\$array}, ${3:\$message = ''})
assertArraySubset	assertArraySubset(${1:\$subset}, ${2:\$array}, ${3:\$strict = false}, ${4:\$message = ''})
assertArrayNotHasKey	assertArrayNotHasKey(${1:\$key}, ${2:\$array}, ${3:\$message = ''})
assertAttributeContains	assertAttributeContains(${1:\$needle}, ${2:\$haystackAttributeName}, ${3:\$haystackClassOrObject}, ${4:\$message = ''}, ${5:\$ignoreCase = false}, ${6:\$checkForObjectIdentity = true}, ${7:\$checkForNonObjectIdentity = false})
assertAttributeContainsOnly	assertAttributeContainsOnly(${1:\$type}, ${2:\$haystackAttributeName}, ${3:\$haystackClassOrObject}, ${4:\$isNativeType = null}, ${5:\$message = ''})
assertAttributeCount	assertAttributeCount(${1:\$expectedCount}, ${2:\$haystackAttributeName}, ${3:\$haystackClassOrObject}, ${4:\$message = ''})
assertAttributeEmpty	assertAttributeEmpty(${1:\$haystackAttributeName}, ${2:\$haystackClassOrObject}, ${3:\$message = ''})
assertAttributeEquals	assertAttributeEquals(${1:\$expected}, ${2:\$actualAttributeName}, ${3:\$actualClassOrObject}, ${4:\$message = ''}, ${5:\$delta = 0.0}, ${6:\$maxDepth = 10}, ${7:\$canonicalize = false}, ${8:\$ignoreCase = false})
assertAttributeGreaterThan	assertAttributeGreaterThan(${1:\$expected}, ${2:\$actualAttributeName}, ${3:\$actualClassOrObject}, ${4:\$message = ''})
assertAttributeGreaterThanOrEqual	assertAttributeGreaterThanOrEqual(${1:\$expected}, ${2:\$actualAttributeName}, ${3:\$actualClassOrObject}, ${4:\$message = ''})
assertAttributeInstanceOf	assertAttributeInstanceOf(${1:\$expected}, ${2:\$attributeName}, ${3:\$classOrObject}, ${4:\$message = ''})
assertAttributeInternalType	assertAttributeInternalType(${1:\$expected}, ${2:\$attributeName}, ${3:\$classOrObject}, ${4:\$message = ''})
assertAttributeLessThan	assertAttributeLessThan(${1:\$expected}, ${2:\$actualAttributeName}, ${3:\$actualClassOrObject}, ${4:\$message = ''})
assertAttributeLessThanOrEqual	assertAttributeLessThanOrEqual(${1:\$expected}, ${2:\$actualAttributeName}, ${3:\$actualClassOrObject}, ${4:\$message = ''})
assertAttributeNotContains	assertAttributeNotContains(${1:\$needle}, ${2:\$haystackAttributeName}, ${3:\$haystackClassOrObject}, ${4:\$message = ''}, ${5:\$ignoreCase = false}, ${6:\$checkForObjectIdentity = true}, ${7:\$checkForNonObjectIdentity = false})
assertAttributeNotContainsOnly	assertAttributeNotContainsOnly(${1:\$type}, ${2:\$haystackAttributeName}, ${3:\$haystackClassOrObject}, ${4:\$isNativeType = null}, ${5:\$message = ''})
assertAttributeNotCount	assertAttributeNotCount(${1:\$expectedCount}, ${2:\$haystackAttributeName}, ${3:\$haystackClassOrObject}, ${4:\$message = ''})
assertAttributeNotEmpty	assertAttributeNotEmpty(${1:\$haystackAttributeName}, ${2:\$haystackClassOrObject}, ${3:\$message = ''})
assertAttributeNotEquals	assertAttributeNotEquals(${1:\$expected}, ${2:\$actualAttributeName}, ${3:\$actualClassOrObject}, ${4:\$message = ''}, ${5:\$delta = 0.0}, ${6:\$maxDepth = 10}, ${7:\$canonicalize = false}, ${8:\$ignoreCase = false})
assertAttributeNotInstanceOf	assertAttributeNotInstanceOf(${1:\$expected}, ${2:\$attributeName}, ${3:\$classOrObject}, ${4:\$message = ''})
assertAttributeNotInternalType	assertAttributeNotInternalType(${1:\$expected}, ${2:\$attributeName}, ${3:\$classOrObject}, ${4:\$message = ''})
assertAttributeNotSame	assertAttributeNotSame(${1:\$expected}, ${2:\$actualAttributeName}, ${3:\$actualClassOrObject}, ${4:\$message = ''})
assertAttributeSame	assertAttributeSame(${1:\$expected}, ${2:\$actualAttributeName}, ${3:\$actualClassOrObject}, ${4:\$message = ''})
assertClassHasAttribute	assertClassHasAttribute(${1:\$attributeName}, ${2:\$className}, ${3:\$message = ''})
assertClassHasStaticAttribute	assertClassHasStaticAttribute(${1:\$attributeName}, ${2:\$className}, ${3:\$message = ''})
assertClassNotHasAttribute	assertClassNotHasAttribute(${1:\$attributeName}, ${2:\$className}, ${3:\$message = ''})
assertClassNotHasStaticAttribute	assertClassNotHasStaticAttribute(${1:\$attributeName}, ${2:\$className}, ${3:\$message = ''})
assertContains	assertContains(${1:\$needle}, ${2:\$haystack}, ${3:\$message = ''}, ${4:\$ignoreCase = false}, ${5:\$checkForObjectIdentity = true}, ${6:\$checkForNonObjectIdentity = false})
assertContainsOnly	assertContainsOnly(${1:\$type}, ${2:\$haystack}, ${3:\$isNativeType = null}, ${4:\$message = ''})
assertContainsOnlyInstancesOf	assertContainsOnlyInstancesOf(${1:\$classname}, ${2:\$haystack}, ${3:\$message = ''})
assertCount	assertCount(${1:\$expectedCount}, ${2:\$haystack}, ${3:\$message = ''})
assertEmpty	assertEmpty(${1:\$actual}, ${2:\$message = ''})
assertEqualXMLStructure	assertEqualXMLStructure(${1:DOMElement \$expectedElement}, ${2:DOMElement \$actualElement}, ${3:\$checkAttributes = false}, ${4:\$message = ''})
assertEquals	assertEquals(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''}, ${4:\$delta = 0.0}, ${5:\$maxDepth = 10}, ${6:\$canonicalize = false}, ${7:\$ignoreCase = false})
assertNotTrue	assertNotTrue(${1:\$condition}, ${2:\$message = ''})
assertFalse	assertFalse(${1:\$condition}, ${2:\$message = ''})
assertFileEquals	assertFileEquals(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''}, ${4:\$canonicalize = false}, ${5:\$ignoreCase = false})
assertFileExists	assertFileExists(${1:\$filename}, ${2:\$message = ''})
assertFileNotEquals	assertFileNotEquals(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''}, ${4:\$canonicalize = false}, ${5:\$ignoreCase = false})
assertFileNotExists	assertFileNotExists(${1:\$filename}, ${2:\$message = ''})
assertGreaterThan	assertGreaterThan(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertGreaterThanOrEqual	assertGreaterThanOrEqual(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertInstanceOf	assertInstanceOf(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertInternalType	assertInternalType(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertJson	assertJson(${1:\$actualJson}, ${2:\$message = ''})
assertJsonFileEqualsJsonFile	assertJsonFileEqualsJsonFile(${1:\$expectedFile}, ${2:\$actualFile}, ${3:\$message = ''})
assertJsonFileNotEqualsJsonFile	assertJsonFileNotEqualsJsonFile(${1:\$expectedFile}, ${2:\$actualFile}, ${3:\$message = ''})
assertJsonStringEqualsJsonFile	assertJsonStringEqualsJsonFile(${1:\$expectedFile}, ${2:\$actualJson}, ${3:\$message = ''})
assertJsonStringEqualsJsonString	assertJsonStringEqualsJsonString(${1:\$expectedJson}, ${2:\$actualJson}, ${3:\$message = ''})
assertJsonStringNotEqualsJsonFile	assertJsonStringNotEqualsJsonFile(${1:\$expectedFile}, ${2:\$actualJson}, ${3:\$message = ''})
composerRequireba4045cf52293f64b152fb4c8ef3038d	composerRequireba4045cf52293f64b152fb4c8ef3038d(${1:\$file})
includeFile	includeFile(${1:\$file})
check_digit	check_digit(${1:\$numbers})
plus	plus(${1:\\$a}, ${2:\\$b})
getStub	getStub()
error_log	error_log()
newrelic_notice_error	newrelic_notice_error()
newrelic_set_appname	newrelic_set_appname(${1:\$appname})
newrelic_name_transaction	newrelic_name_transaction(${1:\$transactionName})
newrelic_add_custom_parameter	newrelic_add_custom_parameter(${1:\$key}, ${2:\$value})
tester	tester(${1:\$handler}, ${2:\$record})
showHelp	showHelp(${1:\$error})
parseArgs	parseArgs(${1:\$args})
regex	regex(${1:\$regex})
magicSplit	magicSplit(${1:\$regex}, ${2:\$string})
resolveNodes	resolveNodes(${1:\$code})
resolveMacros	resolveMacros(${1:\$code})
assertArgs	assertArgs(${1:\$num}, ${2:\$args}, ${3:\$name})
resolveArrays	resolveArrays(${1:\$code})
resolveStackAccess	resolveStackAccess(${1:\$code})
removeTrailingWhitespace	removeTrailingWhitespace(${1:\$code})
ensureDirExists	ensureDirExists(${1:\$dir})
regex	regex(${1:\$regex})
magicSplit	magicSplit(${1:\$regex}, ${2:\$string})
test	test(${1:\$a})
functionName	functionName(${1:&\\$a = 0}, ${2:\\$b = 1.0})
showHelp	showHelp(${1:\$error})
krumo	krumo()
k	k()
kd	kd()
JAMAError	JAMAError(${1:\$errorNumber = null})
hypo	hypo(${1:\$a}, ${2:\$b})
hypot	hypot()
transpose	transpose(${1:\$value})
phpseclib_autoload	phpseclib_autoload(${1:\$class})
functionCallbackFirstArgument	functionCallbackFirstArgument(${1:\$args})
globalFunction	globalFunction()
baz	baz()
&foo	&foo(${1:\$bar})
baz	baz()
&foo	&foo(${1:\$bar})
any	any()
anything	anything()
arrayHasKey	arrayHasKey(${1:\$key})
assertArrayHasKey	assertArrayHasKey(${1:\$key}, ${2:\$array}, ${3:\$message = ''})
assertArraySubset	assertArraySubset(${1:\$subset}, ${2:\$array}, ${3:\$strict = false}, ${4:\$message = ''})
assertArrayNotHasKey	assertArrayNotHasKey(${1:\$key}, ${2:\$array}, ${3:\$message = ''})
assertAttributeContains	assertAttributeContains(${1:\$needle}, ${2:\$haystackAttributeName}, ${3:\$haystackClassOrObject}, ${4:\$message = ''}, ${5:\$ignoreCase = false}, ${6:\$checkForObjectIdentity = true}, ${7:\$checkForNonObjectIdentity = false})
assertAttributeContainsOnly	assertAttributeContainsOnly(${1:\$type}, ${2:\$haystackAttributeName}, ${3:\$haystackClassOrObject}, ${4:\$isNativeType = null}, ${5:\$message = ''})
assertAttributeCount	assertAttributeCount(${1:\$expectedCount}, ${2:\$haystackAttributeName}, ${3:\$haystackClassOrObject}, ${4:\$message = ''})
assertAttributeEmpty	assertAttributeEmpty(${1:\$haystackAttributeName}, ${2:\$haystackClassOrObject}, ${3:\$message = ''})
assertAttributeEquals	assertAttributeEquals(${1:\$expected}, ${2:\$actualAttributeName}, ${3:\$actualClassOrObject}, ${4:\$message = ''}, ${5:\$delta = 0.0}, ${6:\$maxDepth = 10}, ${7:\$canonicalize = false}, ${8:\$ignoreCase = false})
assertAttributeGreaterThan	assertAttributeGreaterThan(${1:\$expected}, ${2:\$actualAttributeName}, ${3:\$actualClassOrObject}, ${4:\$message = ''})
assertAttributeGreaterThanOrEqual	assertAttributeGreaterThanOrEqual(${1:\$expected}, ${2:\$actualAttributeName}, ${3:\$actualClassOrObject}, ${4:\$message = ''})
assertAttributeInstanceOf	assertAttributeInstanceOf(${1:\$expected}, ${2:\$attributeName}, ${3:\$classOrObject}, ${4:\$message = ''})
assertAttributeInternalType	assertAttributeInternalType(${1:\$expected}, ${2:\$attributeName}, ${3:\$classOrObject}, ${4:\$message = ''})
assertAttributeLessThan	assertAttributeLessThan(${1:\$expected}, ${2:\$actualAttributeName}, ${3:\$actualClassOrObject}, ${4:\$message = ''})
assertAttributeLessThanOrEqual	assertAttributeLessThanOrEqual(${1:\$expected}, ${2:\$actualAttributeName}, ${3:\$actualClassOrObject}, ${4:\$message = ''})
assertAttributeNotContains	assertAttributeNotContains(${1:\$needle}, ${2:\$haystackAttributeName}, ${3:\$haystackClassOrObject}, ${4:\$message = ''}, ${5:\$ignoreCase = false}, ${6:\$checkForObjectIdentity = true}, ${7:\$checkForNonObjectIdentity = false})
assertAttributeNotContainsOnly	assertAttributeNotContainsOnly(${1:\$type}, ${2:\$haystackAttributeName}, ${3:\$haystackClassOrObject}, ${4:\$isNativeType = null}, ${5:\$message = ''})
assertAttributeNotCount	assertAttributeNotCount(${1:\$expectedCount}, ${2:\$haystackAttributeName}, ${3:\$haystackClassOrObject}, ${4:\$message = ''})
assertAttributeNotEmpty	assertAttributeNotEmpty(${1:\$haystackAttributeName}, ${2:\$haystackClassOrObject}, ${3:\$message = ''})
assertAttributeNotEquals	assertAttributeNotEquals(${1:\$expected}, ${2:\$actualAttributeName}, ${3:\$actualClassOrObject}, ${4:\$message = ''}, ${5:\$delta = 0.0}, ${6:\$maxDepth = 10}, ${7:\$canonicalize = false}, ${8:\$ignoreCase = false})
assertAttributeNotInstanceOf	assertAttributeNotInstanceOf(${1:\$expected}, ${2:\$attributeName}, ${3:\$classOrObject}, ${4:\$message = ''})
assertAttributeNotInternalType	assertAttributeNotInternalType(${1:\$expected}, ${2:\$attributeName}, ${3:\$classOrObject}, ${4:\$message = ''})
assertAttributeNotSame	assertAttributeNotSame(${1:\$expected}, ${2:\$actualAttributeName}, ${3:\$actualClassOrObject}, ${4:\$message = ''})
assertAttributeSame	assertAttributeSame(${1:\$expected}, ${2:\$actualAttributeName}, ${3:\$actualClassOrObject}, ${4:\$message = ''})
assertClassHasAttribute	assertClassHasAttribute(${1:\$attributeName}, ${2:\$className}, ${3:\$message = ''})
assertClassHasStaticAttribute	assertClassHasStaticAttribute(${1:\$attributeName}, ${2:\$className}, ${3:\$message = ''})
assertClassNotHasAttribute	assertClassNotHasAttribute(${1:\$attributeName}, ${2:\$className}, ${3:\$message = ''})
assertClassNotHasStaticAttribute	assertClassNotHasStaticAttribute(${1:\$attributeName}, ${2:\$className}, ${3:\$message = ''})
assertContains	assertContains(${1:\$needle}, ${2:\$haystack}, ${3:\$message = ''}, ${4:\$ignoreCase = false}, ${5:\$checkForObjectIdentity = true}, ${6:\$checkForNonObjectIdentity = false})
assertContainsOnly	assertContainsOnly(${1:\$type}, ${2:\$haystack}, ${3:\$isNativeType = null}, ${4:\$message = ''})
assertContainsOnlyInstancesOf	assertContainsOnlyInstancesOf(${1:\$classname}, ${2:\$haystack}, ${3:\$message = ''})
assertCount	assertCount(${1:\$expectedCount}, ${2:\$haystack}, ${3:\$message = ''})
assertEmpty	assertEmpty(${1:\$actual}, ${2:\$message = ''})
assertEqualXMLStructure	assertEqualXMLStructure(${1:DOMElement \$expectedElement}, ${2:DOMElement \$actualElement}, ${3:\$checkAttributes = false}, ${4:\$message = ''})
assertEquals	assertEquals(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''}, ${4:\$delta = 0.0}, ${5:\$maxDepth = 10}, ${6:\$canonicalize = false}, ${7:\$ignoreCase = false})
assertNotTrue	assertNotTrue(${1:\$condition}, ${2:\$message = ''})
assertFalse	assertFalse(${1:\$condition}, ${2:\$message = ''})
assertFileEquals	assertFileEquals(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''}, ${4:\$canonicalize = false}, ${5:\$ignoreCase = false})
assertFileExists	assertFileExists(${1:\$filename}, ${2:\$message = ''})
assertFileNotEquals	assertFileNotEquals(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''}, ${4:\$canonicalize = false}, ${5:\$ignoreCase = false})
assertFileNotExists	assertFileNotExists(${1:\$filename}, ${2:\$message = ''})
assertGreaterThan	assertGreaterThan(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertGreaterThanOrEqual	assertGreaterThanOrEqual(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertInstanceOf	assertInstanceOf(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertInternalType	assertInternalType(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertJson	assertJson(${1:\$actualJson}, ${2:\$message = ''})
assertJsonFileEqualsJsonFile	assertJsonFileEqualsJsonFile(${1:\$expectedFile}, ${2:\$actualFile}, ${3:\$message = ''})
assertJsonFileNotEqualsJsonFile	assertJsonFileNotEqualsJsonFile(${1:\$expectedFile}, ${2:\$actualFile}, ${3:\$message = ''})
assertJsonStringEqualsJsonFile	assertJsonStringEqualsJsonFile(${1:\$expectedFile}, ${2:\$actualJson}, ${3:\$message = ''})
assertJsonStringEqualsJsonString	assertJsonStringEqualsJsonString(${1:\$expectedJson}, ${2:\$actualJson}, ${3:\$message = ''})
assertJsonStringNotEqualsJsonFile	assertJsonStringNotEqualsJsonFile(${1:\$expectedFile}, ${2:\$actualJson}, ${3:\$message = ''})
assertJsonStringNotEqualsJsonString	assertJsonStringNotEqualsJsonString(${1:\$expectedJson}, ${2:\$actualJson}, ${3:\$message = ''})
assertLessThan	assertLessThan(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertLessThanOrEqual	assertLessThanOrEqual(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertNotContains	assertNotContains(${1:\$needle}, ${2:\$haystack}, ${3:\$message = ''}, ${4:\$ignoreCase = false}, ${5:\$checkForObjectIdentity = true}, ${6:\$checkForNonObjectIdentity = false})
assertNotContainsOnly	assertNotContainsOnly(${1:\$type}, ${2:\$haystack}, ${3:\$isNativeType = null}, ${4:\$message = ''})
assertNotCount	assertNotCount(${1:\$expectedCount}, ${2:\$haystack}, ${3:\$message = ''})
assertNotEmpty	assertNotEmpty(${1:\$actual}, ${2:\$message = ''})
assertNotEquals	assertNotEquals(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''}, ${4:\$delta = 0.0}, ${5:\$maxDepth = 10}, ${6:\$canonicalize = false}, ${7:\$ignoreCase = false})
assertNotInstanceOf	assertNotInstanceOf(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertNotInternalType	assertNotInternalType(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertNotFalse	assertNotFalse(${1:\$condition}, ${2:\$message = ''})
assertNotNull	assertNotNull(${1:\$actual}, ${2:\$message = ''})
assertNotRegExp	assertNotRegExp(${1:\$pattern}, ${2:\$string}, ${3:\$message = ''})
assertNotSame	assertNotSame(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertNotSameSize	assertNotSameSize(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertNotTag	assertNotTag(${1:\$matcher}, ${2:\$actual}, ${3:\$message = ''}, ${4:\$isHtml = true})
assertNull	assertNull(${1:\$actual}, ${2:\$message = ''})
assertObjectHasAttribute	assertObjectHasAttribute(${1:\$attributeName}, ${2:\$object}, ${3:\$message = ''})
assertObjectNotHasAttribute	assertObjectNotHasAttribute(${1:\$attributeName}, ${2:\$object}, ${3:\$message = ''})
assertRegExp	assertRegExp(${1:\$pattern}, ${2:\$string}, ${3:\$message = ''})
assertSame	assertSame(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertSameSize	assertSameSize(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertSelectCount	assertSelectCount(${1:\$selector}, ${2:\$count}, ${3:\$actual}, ${4:\$message = ''}, ${5:\$isHtml = true})
assertSelectEquals	assertSelectEquals(${1:\$selector}, ${2:\$content}, ${3:\$count}, ${4:\$actual}, ${5:\$message = ''}, ${6:\$isHtml = true})
assertSelectRegExp	assertSelectRegExp(${1:\$selector}, ${2:\$pattern}, ${3:\$count}, ${4:\$actual}, ${5:\$message = ''}, ${6:\$isHtml = true})
assertStringEndsNotWith	assertStringEndsNotWith(${1:\$suffix}, ${2:\$string}, ${3:\$message = ''})
assertStringEndsWith	assertStringEndsWith(${1:\$suffix}, ${2:\$string}, ${3:\$message = ''})
assertStringEqualsFile	assertStringEqualsFile(${1:\$expectedFile}, ${2:\$actualString}, ${3:\$message = ''}, ${4:\$canonicalize = false}, ${5:\$ignoreCase = false})
assertStringMatchesFormat	assertStringMatchesFormat(${1:\$format}, ${2:\$string}, ${3:\$message = ''})
assertStringMatchesFormatFile	assertStringMatchesFormatFile(${1:\$formatFile}, ${2:\$string}, ${3:\$message = ''})
assertStringNotEqualsFile	assertStringNotEqualsFile(${1:\$expectedFile}, ${2:\$actualString}, ${3:\$message = ''}, ${4:\$canonicalize = false}, ${5:\$ignoreCase = false})
assertStringNotMatchesFormat	assertStringNotMatchesFormat(${1:\$format}, ${2:\$string}, ${3:\$message = ''})
assertStringNotMatchesFormatFile	assertStringNotMatchesFormatFile(${1:\$formatFile}, ${2:\$string}, ${3:\$message = ''})
assertStringStartsNotWith	assertStringStartsNotWith(${1:\$prefix}, ${2:\$string}, ${3:\$message = ''})
assertStringStartsWith	assertStringStartsWith(${1:\$prefix}, ${2:\$string}, ${3:\$message = ''})
assertTag	assertTag(${1:\$matcher}, ${2:\$actual}, ${3:\$message = ''}, ${4:\$isHtml = true})
assertThat	assertThat(${1:\$value}, ${2:PHPUnit_Framework_Constraint \$constraint}, ${3:\$message = ''})
assertTrue	assertTrue(${1:\$condition}, ${2:\$message = ''})
assertXmlFileEqualsXmlFile	assertXmlFileEqualsXmlFile(${1:\$expectedFile}, ${2:\$actualFile}, ${3:\$message = ''})
assertXmlFileNotEqualsXmlFile	assertXmlFileNotEqualsXmlFile(${1:\$expectedFile}, ${2:\$actualFile}, ${3:\$message = ''})
assertXmlStringEqualsXmlFile	assertXmlStringEqualsXmlFile(${1:\$expectedFile}, ${2:\$actualXml}, ${3:\$message = ''})
assertXmlStringEqualsXmlString	assertXmlStringEqualsXmlString(${1:\$expectedXml}, ${2:\$actualXml}, ${3:\$message = ''})
assertXmlStringNotEqualsXmlFile	assertXmlStringNotEqualsXmlFile(${1:\$expectedFile}, ${2:\$actualXml}, ${3:\$message = ''})
assertXmlStringNotEqualsXmlString	assertXmlStringNotEqualsXmlString(${1:\$expectedXml}, ${2:\$actualXml}, ${3:\$message = ''})
at	at(${1:\$index})
atLeastOnce	atLeastOnce()
attribute	attribute(${1:PHPUnit_Framework_Constraint \$constraint}, ${2:\$attributeName})
attributeEqualTo	attributeEqualTo(${1:\$attributeName}, ${2:\$value}, ${3:\$delta = 0.0}, ${4:\$maxDepth = 10}, ${5:\$canonicalize = false}, ${6:\$ignoreCase = false})
callback	callback(${1:\$callback})
classHasAttribute	classHasAttribute(${1:\$attributeName})
classHasStaticAttribute	classHasStaticAttribute(${1:\$attributeName})
contains	contains(${1:\$value}, ${2:\$checkForObjectIdentity = true}, ${3:\$checkForNonObjectIdentity = false})
containsOnly	containsOnly(${1:\$type})
containsOnlyInstancesOf	containsOnlyInstancesOf(${1:\$classname})
equalTo	equalTo(${1:\$value}, ${2:\$delta = 0.0}, ${3:\$maxDepth = 10}, ${4:\$canonicalize = false}, ${5:\$ignoreCase = false})
exactly	exactly(${1:\$count})
fileExists	fileExists()
greaterThan	greaterThan(${1:\$value})
greaterThanOrEqual	greaterThanOrEqual(${1:\$value})
identicalTo	identicalTo(${1:\$value})
isEmpty	isEmpty()
isFalse	isFalse()
isInstanceOf	isInstanceOf(${1:\$className})
isJson	isJson()
isNull	isNull()
isTrue	isTrue()
isType	isType(${1:\$type})
lessThan	lessThan(${1:\$value})
lessThanOrEqual	lessThanOrEqual(${1:\$value})
logicalAnd	logicalAnd()
logicalNot	logicalNot(${1:PHPUnit_Framework_Constraint \$constraint})
logicalOr	logicalOr()
logicalXor	logicalXor()
matches	matches(${1:\$string})
matchesRegularExpression	matchesRegularExpression(${1:\$pattern})
never	never()
objectHasAttribute	objectHasAttribute(${1:\$attributeName})
onConsecutiveCalls	onConsecutiveCalls()
once	once()
returnArgument	returnArgument(${1:\$argumentIndex})
returnCallback	returnCallback(${1:\$callback})
returnSelf	returnSelf()
returnValue	returnValue(${1:\$value})
returnValueMap	returnValueMap(${1:array \$valueMap})
stringContains	stringContains(${1:\$string}, ${2:\$case = true})
stringEndsWith	stringEndsWith(${1:\$suffix})
stringStartsWith	stringStartsWith(${1:\$prefix})
throwException	throwException(${1:Exception \$exception})
globalFunction	globalFunction()
func	func()
functionCallback	functionCallback()
snapshotFunction	snapshotFunction()
generateUpToDateMimeArray	generateUpToDateMimeArray()
time	time()
with_clock_mock	with_clock_mock(${1:\$enable = null})
time	time()
headers_sent	headers_sent()
header	header(${1:\$str}, ${2:\$replace = true}, ${3:\$status = null})
testHeader	testHeader()
test_namespaced_function	test_namespaced_function()
time	time()
with_clock_mock	with_clock_mock(${1:\$enable = null})
time	time()
controller_func	controller_func()
some_controller_function	some_controller_function(${1:\$foo}, ${2:\$foobar})
handleSignal	handleSignal(${1:\$signal})
toggle	toggle(${1:a}, ${2:recursive})
assertJsonStringNotEqualsJsonString	assertJsonStringNotEqualsJsonString(${1:\$expectedJson}, ${2:\$actualJson}, ${3:\$message = ''})
assertLessThan	assertLessThan(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertLessThanOrEqual	assertLessThanOrEqual(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertNotContains	assertNotContains(${1:\$needle}, ${2:\$haystack}, ${3:\$message = ''}, ${4:\$ignoreCase = false}, ${5:\$checkForObjectIdentity = true}, ${6:\$checkForNonObjectIdentity = false})
assertNotContainsOnly	assertNotContainsOnly(${1:\$type}, ${2:\$haystack}, ${3:\$isNativeType = null}, ${4:\$message = ''})
assertNotCount	assertNotCount(${1:\$expectedCount}, ${2:\$haystack}, ${3:\$message = ''})
assertNotEmpty	assertNotEmpty(${1:\$actual}, ${2:\$message = ''})
assertNotEquals	assertNotEquals(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''}, ${4:\$delta = 0.0}, ${5:\$maxDepth = 10}, ${6:\$canonicalize = false}, ${7:\$ignoreCase = false})
assertNotInstanceOf	assertNotInstanceOf(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertNotInternalType	assertNotInternalType(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertNotFalse	assertNotFalse(${1:\$condition}, ${2:\$message = ''})
assertNotNull	assertNotNull(${1:\$actual}, ${2:\$message = ''})
assertNotRegExp	assertNotRegExp(${1:\$pattern}, ${2:\$string}, ${3:\$message = ''})
assertNotSame	assertNotSame(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertNotSameSize	assertNotSameSize(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertNotTag	assertNotTag(${1:\$matcher}, ${2:\$actual}, ${3:\$message = ''}, ${4:\$isHtml = true})
assertNull	assertNull(${1:\$actual}, ${2:\$message = ''})
assertObjectHasAttribute	assertObjectHasAttribute(${1:\$attributeName}, ${2:\$object}, ${3:\$message = ''})
assertObjectNotHasAttribute	assertObjectNotHasAttribute(${1:\$attributeName}, ${2:\$object}, ${3:\$message = ''})
assertRegExp	assertRegExp(${1:\$pattern}, ${2:\$string}, ${3:\$message = ''})
assertSame	assertSame(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertSameSize	assertSameSize(${1:\$expected}, ${2:\$actual}, ${3:\$message = ''})
assertSelectCount	assertSelectCount(${1:\$selector}, ${2:\$count}, ${3:\$actual}, ${4:\$message = ''}, ${5:\$isHtml = true})
assertSelectEquals	assertSelectEquals(${1:\$selector}, ${2:\$content}, ${3:\$count}, ${4:\$actual}, ${5:\$message = ''}, ${6:\$isHtml = true})
assertSelectRegExp	assertSelectRegExp(${1:\$selector}, ${2:\$pattern}, ${3:\$count}, ${4:\$actual}, ${5:\$message = ''}, ${6:\$isHtml = true})
assertStringEndsNotWith	assertStringEndsNotWith(${1:\$suffix}, ${2:\$string}, ${3:\$message = ''})
assertStringEndsWith	assertStringEndsWith(${1:\$suffix}, ${2:\$string}, ${3:\$message = ''})
assertStringEqualsFile	assertStringEqualsFile(${1:\$expectedFile}, ${2:\$actualString}, ${3:\$message = ''}, ${4:\$canonicalize = false}, ${5:\$ignoreCase = false})
assertStringMatchesFormat	assertStringMatchesFormat(${1:\$format}, ${2:\$string}, ${3:\$message = ''})
assertStringMatchesFormatFile	assertStringMatchesFormatFile(${1:\$formatFile}, ${2:\$string}, ${3:\$message = ''})
assertStringNotEqualsFile	assertStringNotEqualsFile(${1:\$expectedFile}, ${2:\$actualString}, ${3:\$message = ''}, ${4:\$canonicalize = false}, ${5:\$ignoreCase = false})
assertStringNotMatchesFormat	assertStringNotMatchesFormat(${1:\$format}, ${2:\$string}, ${3:\$message = ''})
assertStringNotMatchesFormatFile	assertStringNotMatchesFormatFile(${1:\$formatFile}, ${2:\$string}, ${3:\$message = ''})
assertStringStartsNotWith	assertStringStartsNotWith(${1:\$prefix}, ${2:\$string}, ${3:\$message = ''})
assertStringStartsWith	assertStringStartsWith(${1:\$prefix}, ${2:\$string}, ${3:\$message = ''})
assertTag	assertTag(${1:\$matcher}, ${2:\$actual}, ${3:\$message = ''}, ${4:\$isHtml = true})
assertThat	assertThat(${1:\$value}, ${2:PHPUnit_Framework_Constraint \$constraint}, ${3:\$message = ''})
assertTrue	assertTrue(${1:\$condition}, ${2:\$message = ''})
assertXmlFileEqualsXmlFile	assertXmlFileEqualsXmlFile(${1:\$expectedFile}, ${2:\$actualFile}, ${3:\$message = ''})
assertXmlFileNotEqualsXmlFile	assertXmlFileNotEqualsXmlFile(${1:\$expectedFile}, ${2:\$actualFile}, ${3:\$message = ''})
assertXmlStringEqualsXmlFile	assertXmlStringEqualsXmlFile(${1:\$expectedFile}, ${2:\$actualXml}, ${3:\$message = ''})
assertXmlStringEqualsXmlString	assertXmlStringEqualsXmlString(${1:\$expectedXml}, ${2:\$actualXml}, ${3:\$message = ''})
assertXmlStringNotEqualsXmlFile	assertXmlStringNotEqualsXmlFile(${1:\$expectedFile}, ${2:\$actualXml}, ${3:\$message = ''})
assertXmlStringNotEqualsXmlString	assertXmlStringNotEqualsXmlString(${1:\$expectedXml}, ${2:\$actualXml}, ${3:\$message = ''})
at	at(${1:\$index})
atLeastOnce	atLeastOnce()
attribute	attribute(${1:PHPUnit_Framework_Constraint \$constraint}, ${2:\$attributeName})
attributeEqualTo	attributeEqualTo(${1:\$attributeName}, ${2:\$value}, ${3:\$delta = 0.0}, ${4:\$maxDepth = 10}, ${5:\$canonicalize = false}, ${6:\$ignoreCase = false})
callback	callback(${1:\$callback})
classHasAttribute	classHasAttribute(${1:\$attributeName})
classHasStaticAttribute	classHasStaticAttribute(${1:\$attributeName})
contains	contains(${1:\$value}, ${2:\$checkForObjectIdentity = true}, ${3:\$checkForNonObjectIdentity = false})
containsOnly	containsOnly(${1:\$type})
containsOnlyInstancesOf	containsOnlyInstancesOf(${1:\$classname})
equalTo	equalTo(${1:\$value}, ${2:\$delta = 0.0}, ${3:\$maxDepth = 10}, ${4:\$canonicalize = false}, ${5:\$ignoreCase = false})
exactly	exactly(${1:\$count})
fileExists	fileExists()
greaterThan	greaterThan(${1:\$value})
greaterThanOrEqual	greaterThanOrEqual(${1:\$value})
identicalTo	identicalTo(${1:\$value})
isEmpty	isEmpty()
isFalse	isFalse()
isInstanceOf	isInstanceOf(${1:\$className})
isJson	isJson()
isNull	isNull()
isTrue	isTrue()
isType	isType(${1:\$type})
lessThan	lessThan(${1:\$value})
lessThanOrEqual	lessThanOrEqual(${1:\$value})
logicalAnd	logicalAnd()
logicalNot	logicalNot(${1:PHPUnit_Framework_Constraint \$constraint})
logicalOr	logicalOr()
logicalXor	logicalXor()
matches	matches(${1:\$string})
matchesRegularExpression	matchesRegularExpression(${1:\$pattern})
never	never()
objectHasAttribute	objectHasAttribute(${1:\$attributeName})
onConsecutiveCalls	onConsecutiveCalls()
once	once()
returnArgument	returnArgument(${1:\$argumentIndex})
returnCallback	returnCallback(${1:\$callback})
returnSelf	returnSelf()
returnValue	returnValue(${1:\$value})
returnValueMap	returnValueMap(${1:array \$valueMap})
stringContains	stringContains(${1:\$string}, ${2:\$case = true})
stringEndsWith	stringEndsWith(${1:\$suffix})
stringStartsWith	stringStartsWith(${1:\$prefix})
throwException	throwException(${1:Exception \$exception})
globalFunction	globalFunction()
func	func()
functionCallback	functionCallback()
snapshotFunction	snapshotFunction()
generateUpToDateMimeArray	generateUpToDateMimeArray()
time	time()
with_clock_mock	with_clock_mock(${1:\$enable = null})
time	time()
headers_sent	headers_sent()
header	header(${1:\$str}, ${2:\$replace = true}, ${3:\$status = null})
testHeader	testHeader()
test_namespaced_function	test_namespaced_function()
time	time()
with_clock_mock	with_clock_mock(${1:\$enable = null})
time	time()
controller_func	controller_func()
some_controller_function	some_controller_function(${1:\$foo}, ${2:\$foobar})
handleSignal	handleSignal(${1:\$signal})
toggle	toggle(${1:a}, ${2:recursive})
